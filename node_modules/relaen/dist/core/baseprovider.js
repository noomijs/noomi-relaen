"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseProvider = void 0;
/**
 * 数据库驱动器接口
 * 提供与dialect相关的操作，不同dialect需要实现此接口
 */
class BaseProvider {
    constructor(cfg) {
    }
    /**
     * 获取连接
     */
    async getConnection() {
        return null;
    }
    /**
     * 关闭连接
     * @param connection -    数据库连接对象
     */
    async closeConnection(connection) { }
    /**
     * 关闭pool
     */
    async endPool() { }
    /**
     * 执行sql语句
     * @param connection -  数据库连接
     * @param sql -         sql语句
     * @param params -      参数
     * @returns             结果(集)
     */
    async exec(connection, sql, params) {
        return null;
    }
    /**
     * 处理记录起始记录索引和记录数
     * @param sql -       sql
     * @param start -     开始索引
     * @param limit -     记录数
     * @returns         处理后的sql
     */
    handleStartAndLimit(sql, start, limit) {
        return null;
    }
    /**
     * 获取实体sequence，针对主键生成策略为sequence时有效
     * @param em -        entity manager
     * @param seqName -   sequence name
     * @param schema -    schema
     * @returns         sequence 值
     */
    getSequenceValue(em, seqName, schema) {
        return null;
    }
    /**
     * 从sql执行结果获取identityid，仅对主键生成策略是identity的有效
     * @param result -  sql执行结果
     * @returns         主键
     */
    getIdentityId(result) {
        return null;
    }
    /**
     * 获取加锁sql语句
     * @param type -      锁类型
     * @param tables -    表名，表锁时使用
     * @param schema -    模式名，表锁时使用
     * @returns         加锁sql语句
     */
    lock(type, tables, schema) {
        return null;
    }
    /**
     * 获取释放锁sql语句
     * @param type -      锁类型
     * @returns         释放锁sql语句
     */
    unlock(type) {
        return null;
    }
    /**
     * 获取新增返回主键字段sql语句
     * @param idField -   主键字段
     * @returns         查询主键sql语句
     */
    insertReturn(idField) {
        return null;
    }
}
exports.BaseProvider = BaseProvider;
//# sourceMappingURL=baseprovider.js.map