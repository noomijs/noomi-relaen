"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityProxy = void 0;
const types_1 = require("./types");
const entityfactory_1 = require("./entityfactory");
const entitymanagerfactory_1 = require("./entitymanagerfactory");
const error_1 = require("./message/error");
const logger_1 = require("./logger");
/**
 * 实体代理类
 */
class EntityProxy {
    /**
     * 获取实体关联对象值
     * @param entity -    实体
     * @param propName -  关联属性名
     * @returns         实体关联对象
     */
    static async get(entity, propName) {
        if (!entityfactory_1.EntityFactory.getIdValue(entity)) {
            logger_1.Logger.error(new error_1.RelaenError("0105"));
            return null;
        }
        const pv = entity[propName];
        if (pv !== undefined && pv !== null) {
            return pv;
        }
        const eo = entityfactory_1.EntityFactory.getEntityConfig(entity.constructor.name);
        const rel = eo.getRelation(propName);
        //具备关联关系
        if (rel) {
            const em = await (0, entitymanagerfactory_1.getEntityManager)();
            const rel = eo.getRelation(propName);
            //关联实体配置
            const eo1 = entityfactory_1.EntityFactory.getEntityConfig(rel.entity);
            //关联字段
            const column = eo.columns.get(propName);
            //引用外键
            if (!rel.mappedBy) { //ManyToOne OneToOne
                if (rel.type === types_1.ERelationType.ManyToOne || rel.type === types_1.ERelationType.OneToOne) {
                    const sql = "SELECT m.* FROM " + eo1.getTableName(true) + " m," + eo.getTableName(true) + " m1 WHERE m." +
                        column.refName + "= m1." + column.name + " AND m1." + eo.getIdName() + " = ?";
                    const query = em.createNativeQuery(sql, rel.entity);
                    //设置外键id
                    query.setParameter(0, entityfactory_1.EntityFactory.getIdValue(entity));
                    //当state=2时，可能不存在外键，则query不存在
                    if (query) {
                        entity[propName] = await query.getResult();
                    }
                }
                else if (rel.type === types_1.ERelationType.ManyToMany) { //ManyToMany
                    const joinTblName = eo.schema ? eo.schema + '.' + column.joinTable : column.joinTable;
                    //关联表主键，默认为关联表主键名
                    const refName = column.refName || eo1.getIdName();
                    //join column 默认为主键名
                    const jcName = column.joinColumn || eo.getIdName();
                    const sql = "SELECT m1.* FROM " + joinTblName + " m LEFT JOIN " + eo1.getTableName(true) + " m1 ON m." + refName +
                        " = m1." + eo1.getIdName() + " WHERE " + "m." + jcName + " = ?";
                    const query = em.createNativeQuery(sql, rel.entity);
                    //设置外键id
                    query.setParameter(0, entityfactory_1.EntityFactory.getIdValue(entity));
                    //当state=2时，可能不存在外键，则query不存在
                    if (query) {
                        entity[propName] = await query.getResultList();
                    }
                }
            }
            else { //被引用
                if (!eo1) {
                    throw new error_1.RelaenError('0020', rel.entity);
                }
                if ((rel.type === types_1.ERelationType.OneToMany || rel.type === types_1.ERelationType.OneToOne)) { // OneToOne OneToMany
                    //通过mappedby找到引用属性
                    const column1 = eo1.columns.get(rel.mappedBy);
                    if (!column1) {
                        throw new error_1.RelaenError('0022', rel.entity, column1);
                    }
                    const sql = "SELECT * FROM " + eo1.getTableName(true) + " WHERE " + column1.name + " = ?";
                    //查询外键对象
                    const query = em.createNativeQuery(sql, rel.entity);
                    //设置查询值
                    query.setParameter(0, entityfactory_1.EntityFactory.getIdValue(entity));
                    entity[propName] = rel.type === types_1.ERelationType.OneToOne ? await query.getResult() : await query.getResultList();
                }
                else if (rel.type === types_1.ERelationType.ManyToMany) { //mantomany
                    const column = eo1.getColumn(rel.mappedBy);
                    //关联表主键，默认为关联表主键名
                    const refName = column.refName || eo.getIdName();
                    //join column 默认为主键名
                    const jcName = column.joinColumn || eo1.getIdName();
                    const joinTblName = eo1.schema ? eo1.schema + '.' + column.joinTable : column.joinTable;
                    const sql = "SELECT m1.* FROM " + joinTblName + " m LEFT JOIN " + eo1.getTableName() + " m1 ON m." + jcName +
                        " = m1." + eo1.getIdName() + " WHERE " + "m." + refName + " = ?";
                    const query = em.createNativeQuery(sql, rel.entity);
                    //设置外键id
                    query.setParameter(0, entityfactory_1.EntityFactory.getIdValue(entity));
                    //当state=2时，可能不存在外键，则query不存在
                    if (query) {
                        entity[propName] = await query.getResultList();
                    }
                }
            }
            //新建的需要关闭
            await em.close();
            return entity[propName];
        }
    }
}
exports.EntityProxy = EntityProxy;
//# sourceMappingURL=entityproxy.js.map