"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityConfig = void 0;
const error_1 = require("./message/error");
/**
 * 实体工厂中的实体配置对象
 */
class EntityConfig {
    /**
     * 构造器
     * @param cfg -   实体配置对象
     */
    constructor(cfg) {
        if (cfg) {
            for (const k of Object.keys(cfg)) {
                this[k] = cfg[k];
            }
        }
        this.columns = new Map();
        this.relations = new Map();
    }
    /**
     * 设置表名
     * @param tableName -
     */
    setTableName(tableName) {
        this.table = tableName;
    }
    /**
     * 设置schema名
     * @param schemaName -
     */
    setSchemaName(schemaName) {
        this.schema = schemaName;
    }
    /**
     * 设置实体类
     * @param entityCls -     实体类
     */
    setEntityClass(entityCls) {
        this.entity = entityCls;
    }
    /**
     * 设置主键对象
     * @param cfg -   主键配置
     */
    setId(cfg) {
        this.id = cfg;
    }
    /**
     * 获取id对象
     * @returns     主键字段对象
     * @throws      错误码 0020
     */
    getId() {
        if (!this.id) {
            throw new error_1.RelaenError('0020', this.entity.name);
        }
        return this.id;
    }
    /**
     * 获取id字段名
     * @returns id字段名
     */
    getIdName() {
        const id = this.getId();
        return this.columns.get(id.name).name;
    }
    /**
     * 获取字段对象
     * @param propName -  实体属性名
     * @returns         属性对应字段对象
     * @throws          错误码0022
     */
    getColumn(propName) {
        if (!this.columns.has(propName)) {
            throw new error_1.RelaenError('0022', this.entity.name, propName);
        }
        return this.columns.get(propName);
    }
    /**
     * 获取对应表名
     * @param withSchema -    是否返回schema
     * @returns             table name
     */
    getTableName(withSchema) {
        if (withSchema && this.schema) {
            return this.schema + '.' + this.table;
        }
        return this.table;
    }
    /**
     * 获取schema名
     * @returns     schema name
     */
    getSchemaName() {
        return this.schema;
    }
    /**
     * 属性名是否对应关系字段
     * @param propName -  属性名
     * @returns         true/false
     */
    hasRelation(propName) {
        return this.relations.has(propName);
    }
    /**
     * 属性名是否是字段
     * @param propName -  属性名
     * @returns         true/false
     */
    hasColumn(propName) {
        return this.columns.has(propName);
    }
    /**
     * 获取关系字段对象
     * @param propName -  实体属性名
     * @returns         实体属性对应关系对象
     * @throws          0023
     */
    getRelation(propName) {
        if (!this.relations.has(propName)) {
            throw new error_1.RelaenError('0023', this.entity.name, propName);
        }
        return this.relations.get(propName);
    }
    /**
     * 添加列
     * @param colName -   属性名
     * @param cfg -       列配置
     */
    addColumn(colName, cfg) {
        //默认nullable为true
        if (cfg.nullable === undefined) {
            cfg.nullable = true;
        }
        this.columns.set(colName, cfg);
    }
    /**
     * 添加关系
     * @param colName -   属性名
     * @param cfg -       关系配置
     */
    addRelation(colName, cfg) {
        this.relations.set(colName, cfg);
    }
}
exports.EntityConfig = EntityConfig;
//# sourceMappingURL=entityconfig.js.map