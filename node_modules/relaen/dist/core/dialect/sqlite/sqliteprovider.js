"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqliteProvider = void 0;
const baseprovider_1 = require("../../baseprovider");
/**
 * sqlite provider
 */
class SqliteProvider extends baseprovider_1.BaseProvider {
    /**
     * 构造器
     * @param cfg -   连接配置
     */
    constructor(cfg) {
        super(cfg);
        this.dbMdl = require('sqlite3');
        this.options = cfg.options ? cfg.options : {
            database: cfg.database
        };
        this.busyErrorRetry = cfg.busyErrorRetry || 500;
        this.busyTimeout = cfg.busyTimeout >= 0 ? cfg.busyTimeout : 2000;
    }
    /**
     * 获取连接
     * @throws      连接错误
     * @returns     数据库连接
     */
    async getConnection() {
        return new Promise((resolve, reject) => {
            new this.dbMdl.Database(this.options['database'], function (err) {
                if (err) {
                    return reject(err);
                }
                resolve(this);
            });
        });
    }
    /**
     * 关闭连接
     * @throws           连接错误
     * @param connection - 数据库连接对象
     */
    async closeConnection(connection) {
        return new Promise((resolve, reject) => {
            connection.conn.close((err) => {
                if (err) {
                    return reject(err);
                }
            });
            resolve(null);
        });
    }
    /**
     * 执行sql语句
     * @param connection -    db connection
     * @param sql -           待执行sql
     * @param params -        参数数组
     * @returns             结果(集)
     */
    async exec(connection, sql, params) {
        return new Promise(async (resolve, reject) => {
            // sql类型:0 非特殊处理  1 insert  2 begin immediate
            let sqlType = 0;
            // insert into 使用run
            if (/^\s*INSERT\s+INTO/i.test(sql)) {
                sqlType = 1;
            }
            else if (/^\s*BEGIN\s+IMMEDIATE/i.test(sql)) {
                sqlType = 2;
            }
            const busyErrorRetry = this.busyErrorRetry;
            const busyTimeout = this.busyTimeout;
            let retryNum = 0;
            await execute();
            // 执行函数
            async function execute() {
                if (sqlType) {
                    connection.conn.run(sql, params, handler);
                }
                else {
                    connection.conn.all(sql, params, handler);
                }
            }
            ;
            function handler(err, rows) {
                if (err) {
                    // SQLITE_BUSY 配置时间
                    if (err['code'] === 'SQLITE_BUSY' && busyErrorRetry > 0) {
                        // busyTime 为0，一直循环执行到成功
                        if (busyTimeout > 0 && (++retryNum * busyErrorRetry) > busyTimeout) {
                            return reject(err);
                        }
                        setTimeout(execute, this.busyErrorRetry);
                        return;
                    }
                    return reject(err);
                }
                // 结果返回
                if (sqlType === 1) {
                    resolve(this);
                }
                else {
                    resolve(rows);
                }
            }
            ;
        });
    }
    /**
     * 处理记录起始记录索引和记录数
     * @param sql -       sql
     * @param start -     开始索引
     * @param limit -     记录数
     * @returns         处理后的sql
     */
    handleStartAndLimit(sql, start, limit) {
        if (Number.isInteger(limit) && limit > 0) {
            if (Number.isInteger(start) && start >= 0) {
                return sql + ' LIMIT ' + limit + ' OFFSET ' + start;
            }
            return sql + ' LIMIT ' + limit;
        }
        return sql;
    }
    /**
     * 从sql执行结果获取identityid，仅对主键生成策略是identity的有效
     * @param result -    sql执行结果
     * @returns         主键
     */
    getIdentityId(result) {
        return result['lastID'];
    }
}
exports.SqliteProvider = SqliteProvider;
//# sourceMappingURL=sqliteprovider.js.map