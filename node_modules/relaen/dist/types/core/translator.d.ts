import { IEntity, EQueryType, ELockMode } from "./types";
import { EntityConfig } from "./entityconfig";
/**
 * 翻译器
 */
export declare abstract class Translator {
    /**
     * 链式map
     * @remarks
     * ```json
     *  {
     *      linkName:{
     *          entity:实体类名,
     *          alias:别名,
     *          co:字段对象,
     *          from:link名
     *      }
     *  }
     * ```
     * linkName为 实体类名[_外键引用名1_外键引用名2_...]
     * 如: Shop_owner
     */
    linkNameMap: Map<string, {
        entity: string;
        alias: string;
        co?: unknown;
        from?: string;
    }>;
    /**
     * 别名id
     */
    private aliasId;
    /**
     * 主实体名
     */
    protected mainEntityName: string;
    /**
     * 主实体配置项
     */
    protected mainEntityCfg: EntityConfig;
    /**
     * 修饰符 如distince
     */
    modifiers: string[];
    /**
     * 选中字段数组
     */
    protected selectedFields: string[];
    /**
     * from table 数组
     */
    protected fromTables: string[];
    /**
     * where条件string
     */
    protected whereObject: [string, unknown[]];
    /**
     * group by string
     */
    protected groupString: string;
    /**
     * having条件string
     */
    protected havingObject: [string, unknown[]];
    /**
     * order by string
     */
    protected orderString: string;
    /**
     * sql 类型
     */
    sqlType: EQueryType;
    /**
     * lock 模式
     */
    lockMode: ELockMode;
    /**
     * 构造翻译器
     * @param entityName -    实体名
     */
    constructor(entityName: string);
    /**
     * entity转insert sql
     * @param entity -  实体
     * @returns         [sql, values]
     */
    entityToInsert(entity: unknown): [string, unknown];
    /**
     * entity转update sql
     * @param entity -               待更新entity
     * @param ignoreUndefinedValue - 忽略undefined值
     * @returns                      [sql, values]
     */
    entityToUpdate(entity: IEntity, ignoreUndefinedValue?: boolean): [string, unknown];
    /**
     * entity转update sql
     * @param entity -      实体对象或待删除的id值
     * @param className -   实体类名
     * @returns             [sql, values]
     */
    toDelete(entity: unknown): [string, unknown];
    /**
     * 处理前置修饰符
     */
    handleModifer(modifier: string): void;
    /**
     * 处理select字段集合
     * @param arr -           字段集合
     * @param entityName -    实体类名
     */
    handleSelectFields(arr: string[], entityName?: string): void;
    /**
     * 处理一个字段
     * @param field -         字段名，字段可以带别名，如果需要转换为对象，则不能使用自定义别名
     * @param entityName -    实体类名
     * @param linkName -      链名
     * @param isCond -        是否为条件字段
     * @param asField -       字段对应别名
     */
    private handleOneField;
    /**
     * 处理重复entityName
     * @param arr -       实体类名数组
     */
    handleFrom(arr: string[]): void;
    /**
     * 处理where条件
     * @param params -        参数对象，每个参数值参考CondValueOption接口
     */
    handleWhere(params: object): void;
    /**
     * 处理group by
     * @param params -    分组参数
     */
    handleGroup(params: string | string[]): any;
    /**
     * 处理having条件
     * @param params -    参数对象，每个参数值参考CondValueOption接口
     */
    handleHaving(params: object): void;
    /**
     * 处理条件判断
     * @param params -    条件参数
     */
    private handleCondition;
    /**
     * 处理order by
     * @param params -        排序参数
     * @param entityName -    实体名
     */
    handleOrder(params: object, entityName?: string): string;
    /**
     * 产生查询sql
     * @returns     数组[sql,linkMap,values]
     *              其中：linkMap为该translator的linkNameMap，values为查询参数值
     */
    getQuerySql(): [string, unknown, unknown[]];
    /**
     * 获取select sql
     * @param mainOrm -   主表类对象
     * @returns 数组[sql,linkMap,values]
     *          其中：linkMap为该translator的linkNameMap，values为查询参数值
     */
    protected getSelectSql(): [string, unknown, unknown[]];
    /**
     * 生成增删改sql
     * @param notNeedAlias -      不需要别名
     * @returns 数组[sql,linkMap,values]
     *          其中：linkMap为该translator的linkNameMap，values为查询参数值
     */
    protected getDeleteSql(notNeedAlias?: boolean): [string, unknown, unknown[]];
}
