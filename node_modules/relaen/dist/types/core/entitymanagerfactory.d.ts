import { EntityManager } from "./entitymanager";
import { IEntity, EEntityState } from "./types";
/**
 * entity manager 工厂
 */
declare class EntityManagerFactory {
    /**
     * 连接map
     * @remarks
     * 用于保证一个异步方法中只能有一个entitymanager，结构为：
     * ```json
     * {
     *  threadId:{
     *      num:em创建次数,
     *      em:entity manager
     *  }
     * }
     * ```
     */
    private static entityManagerMap;
    /**
     * 实体状态map
     */
    private static entityStatusMap;
    /**
     * 创建 entity manager，使用后需要释放
     * @param isCache -   是否开启缓存
     * @returns         实体管理器
     */
    static createEntityManager(isCache?: boolean): Promise<EntityManager>;
    /**
     * 关闭entitymanager
     * @param em -        实体管理器
     * @param force -     是否强制关闭
     */
    static closeEntityManager(em: EntityManager, force?: boolean): Promise<void>;
    /**
     * 根据id获取entity manager
     * @param id    entity manager id
     * @returns     entity manager
     */
    static getEntityManager(id: number): EntityManager;
    /**
     * 获取当前entitymanager，使用后不用释放
     * @returns     实体管理器
     */
    static getCurrentEntityManager(): EntityManager;
    /**
     * 关闭当前entity manager
     */
    static closeCurrentEntityManager(): void;
    /**
     * 设置实体状态
     * @param entity -    实体
     * @param state -     状态
     */
    static setEntityStatus(entity: IEntity, state: EEntityState): void;
    /**
     * 获取实体状态
     * @param entity -    实体对象
     * @returns         实体状态或undefined
     */
    static getEntityStatus(entity: IEntity): EEntityState;
}
/**
 * 返回entity manager
 * @param isCache -   是否开启缓存
 * @returns         实体管理器
 */
declare function getEntityManager(isCache?: boolean): Promise<EntityManager>;
export { EntityManagerFactory, getEntityManager };
