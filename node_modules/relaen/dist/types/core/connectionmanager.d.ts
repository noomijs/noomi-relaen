import { Connection } from "./connection";
import { ConnectionOption } from "./types";
import { BaseProvider } from "./baseprovider";
/**
 * 连接管理器
 */
declare class ConnectionManager {
    /**
     * 数据库驱动器
     */
    static provider: BaseProvider;
    /**
     * 连接map
     * @remarks
     * 用于保证一个异步方法中只能有一个connection
     * ```
     * {
     *      threadId1:connection1
     *  }
     * }
     * ```
     */
    private static connectionMap;
    /**
     * 初始化连接管理器
     * @param cfg - relaen配置文件的数据库配置对象
     */
    static init(cfg: ConnectionOption): void;
    /**
     * 获取连接对象
     * @param id -   创建者id，直接使用时，不需要设置该值
     * @returns    connection对象
     */
    static createConnection(id?: number): Promise<Connection>;
    /**
     * 关闭连接
     * @param connection -    数据库连接对象
     * @param force -         是否强制释放
     */
    static closeConnection(connection: Connection, force?: boolean): Promise<void>;
    /**
     * 添加conn到map
     * @param threadId -      线程id
     * @param conn -          连接对象
     */
    static addConnection(threadId: number, conn: Connection): void;
    /**
     * 从map移除connection
     * @param threadId -      线程id
     */
    static removeConnection(threadId: number): void;
}
/**
 * 获取连接对象
 * @param id -   创建者id，直接使用时，不需要设置该值
 * @returns    connection对象
 */
declare function getConnection(id?: number): Promise<Connection>;
export { ConnectionManager, getConnection };
