import { EntityManager } from "./entitymanager";
import { EQueryType, ELockMode } from "./types";
/**
 * 查询类
 */
declare class Query {
    /**
     * entity 管理器
     */
    entityManager: EntityManager;
    /**
     * 参数值数组或对象
     */
    paramArr: unknown[] | object;
    /**
     * 执行sql
     */
    execSql: string;
    /**
     * 实体类名
     */
    entityClassName: string;
    /**
     * 查询记录的start index
     */
    start: number;
    /**
     * 查询记录的条数限制
     */
    limit: number;
    /**
     * 类型 0:select , 1:insert , 2:update, 3:delete
     */
    type: EQueryType;
    /**
     * 实体别名map
     */
    aliasMap: Map<string, {
        entity: unknown;
        linkName: string;
    }>;
    /**
     * 解释器
     */
    private translator;
    /**
     * 构造query对象
     * @param em -                entity manager
     * @param entityClassName -   对应的结果实体类名
     */
    constructor(em: EntityManager, entityClassName?: string);
    /**
     * 设置查询参数值
     * @param index -     占位符下标
     * @param value -     占位符值
     */
    setParameter(index: number, value: unknown): void;
    /**
     * 设置多个参数值，从下标0开始
     * @param valueArr -  值数组
     */
    setParameters(valueArr: Array<unknown>): void;
    /**
     * 设置开始记录位置
     * @param start -     开始位置
     */
    setStart(start: number): void;
    /**
     * 设置获取记录数
     * @param limit -     记录数
     */
    setLimit(limit: number): void;
    /**
     * 获取单个查询结果
     * @param notEntity -   不返回实体，如果类为true且只有一个属性值，则直接返回属性值，否则返回对象
     * @returns             select:实体|object|值
     *                      delete:true/false
     */
    getResult(notEntity?: boolean): Promise<unknown>;
    /**
     * 获取结果列表
     * @param start -         开始索引
     * @param limit -         记录数
     * @param notEntity -     是否不转成为实体
     * @returns             实体或对象数组
     */
    getResultList(start?: number, limit?: number, notEntity?: boolean): Promise<unknown | unknown[]>;
    /**
     * 预处理
     */
    private preHandle;
    /**
     * 生成实体
     * @param r -   查询结果
     * @returns     实体对象
     */
    private genEntity;
    /**
     * 构造查询 字段集
     * @param fields -    属性或属性数组
     */
    select(fields: string | Array<string>): Query;
    /**
     * 添加查询表集
     * @remarks
     * 主表的关联表会自动处理，此处不需要加入
     * @param tables -  实体类名或实体类名数组
     * @returns         查询对象
     */
    from(tables: string | Array<string>): Query;
    /**
     * 添加where条件
     * @param params -  参数对象
     * ```js
     *  {
     *      paramName1:paramValue1,
     *      paramName2:{value:paramValue2,rel:'>',before:'(',after:'and'}
     *       ...
     *  }
     *  参数值有两种方式，一种是直接在参数名后给值，一种是给对象，对象中包括:
     *  value:值,rel:关系,before:字段前字符串(通常为"("),after:值后字符串(通常为"and","or",")")
     *  关系包括 >,<,>=,<=,<>,is,like等
     * ```
     */
    where(params: object): Query;
    /**
     * 添加排序对象
     * @param params -  参数对象
     * 格式为：
     * ```js
     *  {
     *      paramName1:'desc',
     *      paramName2:'asc',
     *      ...
     *  }
     * ```
     * paramName1:参数名,desc:降序 asc:升序
     */
    orderBy(params: object): this;
    /**
     * 添加distinct
     */
    distinct(): this;
    /**
     * 构造删除
     */
    delete(): this;
    /**
     * 添加分组条件
     * @param params - 属性或属性数组
     */
    groupBy(params: string | Array<string>): this;
    /**
     * 添加where条件
     * @param params -    参数对象
     * ```js
     * {
     *      paramName1:paramValue1,
     *      paramName2:{value:paramValue2,rel:'>',before:'(',after:'and'}
     *      ...
     * }
     * 参数值有两种方式，一种是直接在参数名后给值，一种是给对象，对象中包括:
     * value:值,rel:关系,before:字段前字符串(通常为"("),after:值后字符串(通常为"and","or",")")
     * 关系包括 >,<,>=,<=,<>,is,like等
     * ```
     */
    having(params: object): this;
    /**
     * 设置查询锁模式
     * @param ELockMode -     锁模式
     * @param ElockType -     锁类型
     */
    setLock(lockMode: ELockMode): this;
}
export { Query };
