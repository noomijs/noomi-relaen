import { EntityConfig } from "./entityconfig";
import { EntityPKey, EntityColumnOption, EntityRelation, IEntity, UnknownClass } from "./types";
/**
 * 实体工厂，管理所有实体类
 */
declare class EntityFactory {
    /**
     * 实体类集
     */
    private static entityConfigs;
    /**
     * 添加实体类
     * @param entityName -    实体类名
     * @param tblName -       表名
     * @param schema -        数据库名
     */
    static addEntityConfig(entity: UnknownClass, tblName: string, schema?: string): void;
    /**
     * 添加主键
     * @param entityName -    实体类名
     * @param propName -      实体字段名
     * @param cfg -           主键配置对象
     */
    static addPKey(entityName: string, propName: string, cfg: EntityPKey): void;
    /**
     * 设置版本号字段名
     * @param entityName -    实体类名
     * @param propName -      版本号字段属性名
     */
    static addVersion(entityName: string, propName: string): void;
    /**
     * 添加实体字段
     * @param entityName -    实体类名
     * @param colName -       实体字段名
     * @param cfg -           实体字段配置
     */
    static addColumn(entityName: string, colName: string, cfg: EntityColumnOption): void;
    /**
     * 添加实体关系
     * @param entityName -    实体名
     * @param colName -       属性名
     * @param rel -           关系对象
     */
    static addRelation(entityName: string, colName: string, rel: EntityRelation): void;
    /**
     * 检查class是否存在，不存在则新建
     * @param entityName -    实体类名
     */
    private static checkAndNew;
    /**
     * 获取entity classname  对应的配置项
     * @param entityName -    实体类名
     * @returns             实体配置
     */
    static getEntityConfig(entityName: string): EntityConfig;
    /**
     * 是否有entity class
     * @param entityName -    实体类名
     * @returns             是否存在
     */
    static hasEntityConfig(entityName: string): boolean;
    /**
     * 从文件添加实体到工厂
     * @param path -  文件路径
     */
    static addEntities(path: string): Promise<void>;
    /**
     * 通过表名获取配置对象
     * @param tblName -   表名
     * @returns         entity 配置对象
     */
    static getEntityCfgByTblName(tblName: string): EntityConfig;
    /**
     * 设置属性值
     * @param entity -    实体对象
     * @param value -     实体值
     */
    static setIdValue(entity: IEntity, value: unknown): void;
    /**
     * 获取id值
     * @param entity -    实体对象
     * @returns         实体id值
     */
    static getIdValue(entity: IEntity): unknown;
    /**
     * 获取所有实体配置
     * @returns     实体配置数组
     */
    static getAllEntityConfig(): EntityConfig[];
    /**
     * 字符串转正则表达式
     * @param str -       源串
     * @param side -      匹配的边 1 左边 2右边 3两边
     * @returns
     */
    private static toReg;
}
export { EntityFactory };
