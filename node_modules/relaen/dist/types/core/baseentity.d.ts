import { IEntity } from "./types";
/**
 * 实体基类
 */
export declare class BaseEntity implements IEntity {
    /**
     * 构造函数
     */
    constructor();
    /**
     * 保存实体
     * @param ignoreUndefinedValue -  忽略undefined值，针对update时有效
     * @param lockMode -              锁模式
     * @returns                     保存后的实体
     */
    save(ignoreUndefinedValue?: boolean): Promise<IEntity>;
    /**
     * 删除实体
     * @returns     删除实体
     */
    delete(): Promise<IEntity>;
    /**
     * 根据id查询单个实体
     * @param id -    实体主键
     * @returns     查询实体
     */
    static find(id: unknown): Promise<IEntity>;
    /**
     * 根据条件查询单个实体
     * @param params -    参数对象，参考EntityManager.findOne方法说明
     * @returns         实体
     */
    static findOne(params?: object): Promise<IEntity>;
    /**
     * 根据条件查找多个对象
     * @param params -    参数对象，参考EntityManager.findOne方法说明
     * @param start -     开始记录行
     * @param limit -     获取记录数
     * @param order -     排序规则`{paramName1:'desc',paramName2:'asc',...}`， paramName1:参数名,desc:降序 asc:升序
     * @returns         实体集
     */
    static findMany(params?: object, start?: number, limit?: number, order?: object): Promise<IEntity[]>;
    /**
     * 获取记录数
     * @param params -  参数对象，参考EntityManager.findOne
     * @returns         记录数
     */
    static getCount(params?: object): Promise<number>;
    /**
     * 删除对象
     * @param id -    实体id值
     * @returns     删除的实体
     */
    static delete(id: unknown): Promise<boolean>;
    /**
     * 删除对象
     * @param params -    参数对象，参考EntityManager.findOne
     * @returns         删除成功返回true
     */
    static deleteMany(params?: object): Promise<boolean>;
    /**
     * 对比
     * @param obj -   简化后的实体值对象
     * @returns     如果相同，则返回true，否则返回false
     */
    compare(obj: object): boolean;
    /**
     * 浅拷贝，外键对象只拷贝主键值
     */
    clone(): object;
}
