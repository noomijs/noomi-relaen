import { Connection } from "../../connection";
import { BaseProvider } from "../../baseprovider";
import { EntityManager } from "../../entitymanager";
import { IOracleConnectionCfg } from "./oracleoptions";
import { ELockType } from "../../types";
/**
 * oracle provider
 */
export declare class OracleProvider extends BaseProvider {
    /**
     * 是否开启连接池
     */
    private isPool;
    /**
     * 构造器
     * @param cfg -   连接配置
     */
    constructor(cfg: IOracleConnectionCfg);
    /**
     * 获取连接
     * @returns     connection
     */
    getConnection(): Promise<any>;
    /**
     * 关闭连接
     * @param connection -    数据库连接对象
     */
    closeConnection(connection: Connection): Promise<any>;
    /**
     * 执行sql语句
     * @param connection -    db connection
     * @param sql -           待执行sql
     * @param params -        参数数组
     * @returns             结果(集)
     */
    exec(connection: Connection, sql: string, params?: unknown[]): Promise<unknown>;
    /**
     * 处理记录起始记录索引和记录数
     * @param sql -     sql
     * @param start -   开始索引
     * @param limit -   记录数
     * @returns         处理后的sql
     */
    handleStartAndLimit(sql: string, start?: number, limit?: number): string;
    /**
     * 获取实体sequence，针对主键生成策略为sequence时有效
     * @param em -      entity manager
     * @param seqName - sequence name
     * @param schema -  schema
     * @returns         sequence 值
     */
    getSequenceValue(em: EntityManager, seqName: string, schema?: string): Promise<number>;
    /**
     * 获取加锁sql语句
     * @param type -    锁类型
     * @param tables -  表名，表锁时使用
     * @param schema -  模式名，表锁时使用
     * @returns         加锁sql语句
     */
    lock(type: ELockType, tables?: string[], schema?: string): string;
}
