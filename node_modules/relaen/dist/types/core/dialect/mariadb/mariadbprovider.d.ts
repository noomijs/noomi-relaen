import { Connection } from "../../connection";
import { BaseProvider } from "../../baseprovider";
import { MariadbConnectionOption } from "./mariadboptions";
import { ELockType } from "../../types";
/**
 * mariadb provider
 */
export declare class MariadbProvider extends BaseProvider {
    /**
     * 构造器
     * @param cfg -   连接配置
     */
    constructor(cfg: MariadbConnectionOption);
    /**
     * 获取连接
     * @returns     数据库连接
     */
    getConnection(): Promise<any>;
    /**
     * 关闭连接
     * @param connection -    数据库连接对象
     */
    closeConnection(connection: Connection): Promise<void>;
    /**
     * 执行sql语句
     * @param connection -    db connection
     * @param sql -           待执行sql
     * @param params -        参数数组
     * @returns             结果(集)
     */
    exec(connection: Connection, sql: string, params?: unknown[]): Promise<unknown>;
    /**
     * 处理记录起始记录索引和记录数
     * @param sql -       sql
     * @param start -     开始索引
     * @param limit -     记录数
     * @returns         处理后的sql
     */
    handleStartAndLimit(sql: string, start?: number, limit?: number): string;
    /**
     * 从sql执行结果获取identityid，仅对主键生成策略是identity的有效
     * @param result -    sql执行结果
     * @returns         主键
     */
    getIdentityId(result: any): number;
    /**
     * 获取加锁sql语句
     * @param type -      锁类型
     * @param tables -    表名，表锁时使用
     * @param schema -    模式名，表锁时使用
     * @returns         加锁sql语句
     */
    lock(type: ELockType, tables?: string[], schema?: string): string;
    /**
     * 获取释放锁sql语句
     * @param type -      锁类型
     * @returns         释放锁sql语句
     */
    unlock(type: ELockType): string;
}
