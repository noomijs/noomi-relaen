import { IEntity } from "./types";
import { Query } from "./query";
import { Connection } from "./connection";
import { NativeQuery } from "./nativequery";
import { EntityConfig } from "./entityconfig";
/**
 * 实体管理器
 */
declare class EntityManager {
    /**
     * 对象id
     */
    id: number;
    /**
     * 连接
     */
    connection: Connection;
    /**
     * 是否开启缓存
     */
    isCache: boolean;
    /**
     * 查询结果集缓存
     *     key:sql语句和参数值组合成的字符串，value:查询结果集
     */
    private cache;
    /**
     * 构造函数
     * @param conn -  连接对象
     * @param id -    entity manager id
     */
    constructor(conn: Connection, id?: number, isCache?: boolean);
    /**
     * 保存新对象
     * 如果状态为new，则执行insert，同时改变为persist，如果为persist，则执行update
     * @param entity -                实体
     * @param ignoreUndefinedValue -  忽略undefined值，针对update时有效
     * @param lockMode -              乐观锁，针对update时有效
     * @returns                     保存后的实体
     */
    save(entity: IEntity, ignoreUndefinedValue?: boolean): Promise<IEntity>;
    /**
     * 删除实体
     * @param entity -      待删除实体或id
     * @param className -   实体类名
     * @returns             被删除实体
     */
    delete(entity: unknown, className?: string): Promise<boolean>;
    /**
     * 通过id查找实体
     * @param entityClassName -     entity class 名
     * @param id -                  entity id 值
     * @returns                     entity
     */
    find(entityClassName: string, id: unknown): Promise<IEntity>;
    /**
     * 根据条件查找一个对象
     * @param entityClassName - 实体类名
     * @param params - 参数对象
     * 参数值有两种方式，一种是值，一种是值对象，值对象参考CondValueOption接口说明，示例如下：
     * ```json
     * {
     *      propName1:propValue1, //值
     *      propName2:{value:propValue2,rel:'>',before:'(',after:')',logic:'OR'} //值对象
     *      ...
     *  }
     * ```
     * @param order -  排序对象，结构为：
     * ```json
     *  {
     *      propName1:asc,
     *      propName2:desc,
     *      ...
     *  }
     * ```
     * @returns   实体
     */
    findOne(entityClassName: string, params?: object, order?: object): Promise<unknown>;
    /**
     * 根据条件查找多个对象
     * @param entityClassName - 实体类名
     * @param params -          参数对象，参考findOne
     * @param start -           开始记录行
     * @param limit -           获取记录数
     * @param order -           排序对象，参考findOne
     * @returns                 实体集
     */
    findMany(entityClassName: string, params?: object, start?: number, limit?: number, order?: object): Promise<unknown[]>;
    /**
     * 获取选择字段集
     * @param orm -       实体配置
     * @param isField -   默认返回属性名，true返回数据库字段字符串
     * @returns         字段集
     */
    getSelectFields(orm: EntityConfig, isField?: boolean): string[] | string;
    /**
     * 获取记录数
     * @param entityClassName -   实体类名
     * @param params -            参数对象，参考findOne
     * @returns                 记录数
     */
    getCount(entityClassName: string, params?: object): Promise<number>;
    /**
     * 删除多个
     * @param entityClassName -   实体类名
     * @param params -            条件参数，参考findOne
     * @returns                 成功:true，失败:false
     */
    deleteMany(entityClassName: string, params?: object): Promise<boolean>;
    /**
     * 创建查询对象
     * @param entityClassName -   实体类名
     * @returns                 查询对象
     */
    createQuery(entityClassName: string): Query;
    /**
     * 创建原生sql查询
     * @param sql -               sql语句
     * @param entityClassName -   实体类名
     * @returns                 原生查询对象
     */
    createNativeQuery(sql: string, entityClassName?: string): NativeQuery;
    /**
     * 关闭entity manager
     * @param force -     是否强制关闭
     */
    close(force?: boolean): Promise<void>;
    /**
     * 加入cache
     * @param key -       key
     * @param value -     结果集
     */
    addToCache(key: string, value: unknown): void;
    /**
     * 从cache中获取
     * @param key -   缓存key
     */
    getFromCache(key: string): unknown;
    /**
     * 清除缓存
     */
    clearCache(): void;
    /**
     * 生成主键
     * @param entity -    实体
     * @returns          主键值
     */
    private genKey;
    /**
     * 预处理实体对象
     * @param entity -                实体对象
     * @param ignoreUndefinedValue -  忽略undefined值
     * @throws                      处理错误
     * @returns                     成功true
     */
    private preHandleEntity;
}
export { EntityManager };
